version: '3.8'

services:
  postgres:
    image: postgres:13
    restart: unless-stopped
    env_file: .env.prod
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-sql/:/docker-entrypoint-initdb.d/:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:6
    restart: unless-stopped
    env_file: .env.prod
    ports: []
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    image: ${API_IMAGE:-your-registry/customable-api:latest}
    env_file: .env.prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # One-off migrator service: runs migrations and exits
  migrator:
    image: ${API_IMAGE:-your-registry/customable-api:latest}
    env_file: .env.prod
    entrypoint: ["/bin/migrate"]
    command: ["-up"]
    depends_on:
      - postgres
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
